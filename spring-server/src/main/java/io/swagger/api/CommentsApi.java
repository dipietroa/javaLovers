/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Comment;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-10-24T16:40:41.784Z")

@Api(value = "comments", description = "the comments API")
public interface CommentsApi {

    @ApiOperation(value = "add a new comment", nickname = "addComment", notes = "add a new comment to the list of comments", tags={ "comments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "successful operation") })
    @RequestMapping(value = "/comments",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addComment(@ApiParam(value = "Created user object" ,required=true )  @Valid @RequestBody String body);


    @ApiOperation(value = "Get single comment", nickname = "getCommentById", notes = "Get a single comment (by ID)", response = Comment.class, responseContainer = "List", tags={ "comments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Comment.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Comment not found") })
    @RequestMapping(value = "/comments/{id]",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Comment>> getCommentById(@ApiParam(value = "The comment that needs to be fetched.",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Get all comments", nickname = "getComments", notes = "Get the list of all visitor's comments", response = String.class, responseContainer = "List", tags={ "comments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = String.class, responseContainer = "List") })
    @RequestMapping(value = "/comments",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<String>> getComments();

}
